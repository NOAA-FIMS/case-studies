---
title: Exploration of advanced FIMS features
format:
  html:
    code-fold: true
---

## The setup

{{< include setup.qmd >}}

```{r}
#| warning: false
#| label: startup
#| output: false
```

-   R version: `r R_version`\
-   TMB version: `r TMB_version`\
-   FIMS commit: `r FIMS_commit`\
-   Stock name: Gulf of Alaska (GOA) Walleye Pollock\
-   Region: AFSC\
-   Analyst: Cole Monnahan\

## Simplifications to the original assessment

See the AFSC-GOA-pollock case study for details on the model. Here the focus is on advanced features.


## Script to prepare data for building FIMS object

```{r}
#| warning: false
#| label: prepare-fims-data
#| output: false
library(ggplot2)
library(FIMS)
library(dplyr)
library(tidyr)
library(TMB)
ggplot2::theme_set(theme_bw())
## define the dimensions and global variables
years <- 1970:2023
nyears <- length(years)
nseasons <- 1
nages <- 10
ages <- 1:nages
## This will fit the models bridging to FIMS (simplifying)
## source("fit_bridge_models.R")
## compare changes to model
pkfitfinal <- readRDS("data_files/pkfitfinal.RDS")
pkfit0 <- readRDS("data_files/pkfit0.RDS")
parfinal <- pkfitfinal$obj$env$parList()
pkinput0 <- readRDS('data_files/pkinput0.RDS')
fimsdat <- pkdat0 <- pkinput0$dat
pkinput <- readRDS('data_files/pkinput.RDS')
```

## Run FIMS model without using wrapper functions
```{r}
#| warning: false
#| label: run-FIMS
#| output: false
#| eval: true

## set up FIMS data objects
FIMS::clear()
estimate_fish_selex <- TRUE
estimate_survey_selex <- TRUE
estimate_q2 <- TRUE
estimate_q3 <- TRUE
estimate_q6 <- TRUE
estimate_F <- TRUE
estimate_recdevs <- TRUE

# Set up a FIMS model without wrapper functions
source("R/pk_prepare_FIMS_inputs.R")

## make FIMS model
success <- CreateTMBModel()
parameters <- list(p = get_fixed())
obj <- TMB::MakeADFun(data = list(), parameters, DLL = "FIMS", silent = TRUE)
opt <- with(obj, nlminb(
  start = par,
  objective = fn,
  gradient = gr,
  control = list(
    eval.max = 10000,
    iter.max = 10000,
    trace = 0
  )
))
max(abs(obj$gr())) # from Cole, can use TMBhelper::fit_tmb to get val to <1e-10
rep2 <- obj$report(obj$env$last.par.best) ## FIMS after estimation
```


## Extra analyses
Two extra analyses are demonstrated. First is a likelihood profile over lnR0, showing component contributions and testing for data conflict (a Piner plot). The second is to run the model through the 'Stan' software using the 'tmbstan' R package. This samples from the posterior, which are put back into the model to get the posterior distribution for spawning stock biomass. Given its long run time the results are saved to a file and read in for post-hoc plotting.

``` {r}
#| label: likelihood-profile
#| warning: true
#| output: false

## Try a likelihood profile
i <- 68 # this will break if model is changed at all
map <- parameters
map$p[i] <- NA # map off R0 specified below
map$p <- as.factor(map$p)
xseq <- as.numeric(c(opt$par[i],  seq(22,24, len=30)))
res <- list()
for(j in 1:length(xseq)){
  print(j)
  parameters$p[i] <- xseq[j]
  obj2 <- MakeADFun(data = list(), parameters, DLL = "FIMS", silent = TRUE, map=map)
  opt2 <- with(obj2, nlminb(par,fn,gr))
  out <- obj2$report(obj2$env$last.par.best)
  nll_components <- out$nll_components
  index_nll <- sum(nll_components[seq(2, length(nll_components), by = 2)])
  age_comp_nll <- sum(nll_components[seq(3, length(nll_components), by = 2)])
  res[[j]] <- data.frame(
    j = j, lnR0 = xseq[j], total = out$jnll, index = index_nll,
    age = age_comp_nll, recruit = out$nll_components[1], maxgrad = max(abs(obj$gr()))
  )
}
res <- bind_rows(res) %>%
  pivot_longer( cols=c(total, index, age, recruit)) %>%
  group_by(name) %>% mutate(deltaNLL=value-min(value))
g <- ggplot(res, aes(lnR0, deltaNLL, color=name)) + geom_line()
g <- g+ geom_point(data=filter(res, deltaNLL==0), size=2) +
  labs(y='Delta NLL', color='NLL component')
ggsave('figures/AFSC_PK_like_profile_R0.png', g, width=7, height=3.5)
```

![Likelihood Profile](figures/AFSC_PK_like_profile_R0.png){width=7in}

## Bayesian integration in FIMS
This section demonstrates how to do integration via the NUTS algorithm. 

```{r}
#| label: bayesian-integration
#| warning: true
#| output: false
# this takes too long to run for rendering so saving everything to file

## Try Bayesian
#library(tmbstan)
library(shinystan)
library(adnuts)
## Some paraemters wandering off to Inf so fix those (need
## priors). Needs a ton of work but is proof of concept. Major
## problem is parallel fails.
map <- parameters
## parameters$p[65:66]
map$p[c(65,66,114)] <- NA
map$p <- as.factor(map$p)
obj3 <- MakeADFun(data = list(), parameters, DLL = "FIMS", silent=TRUE, map=map)
parameter_names <- names(FIMS:::get_parameter_names(obj3[["par"]]))
# ## Fails when trying to do this in parallel unfortunately
# mcmc <- sample_sparse_tmb(obj3, iter=1200, warmup=200, chains=4, cores=1,
#                           seed=1, init='random',
#                           control=list(adapt_delta=.95))
# saveRDS(mcmc, file='data_files/pk_mcmcfit.RDS')

mcmc <- readRDS('data_files/pk_mcmcfit.RDS')
png('figures/MCMC_pairs.png', width=7, height=5, units='in', res=200)
pairs_admb(mcmc, pars=1:6, order='slow')
dev.off()

png('figures/MCMC_marginals.png', width=7, height=5, units='in', res=200)
plot_marginals(mcmc, pars=1:9)
dev.off()

png('figures/MCMC_uncertainties.png', width=7, height=5, units='in', res=200)
plot_uncertainties(mcmc)
dev.off()

png('figures/MCMC_sampler_params.png', width=7, height=7, units='in', res=200)
plot_sampler_params(mcmc)
dev.off()



#launch_shinyadmb(mcmc)
df <- as.data.frame(mcmc)
## for each posterior draw, report to get SSB
postreps <- list()
for(ii in 1:nrow(df)){
  if(ii %% 500==0) print(ii)
  postreps[[ii]] <- obj3$rep(df[ii,])
}
ssbpost <- lapply(postreps, function(x) data.frame(year=years, ssb=x$ssb[[1]][-55]))%>%
  bind_rows %>% mutate(rep=rep(1:nrow(df), each=54))
saveRDS(ssbpost, file='data_files/pk_SSB_posteriors.RDS')
ssbpost <- readRDS('data_files/pk_pollock_SSB_posteriors.RDS')
g <- ggplot(ssbpost, aes(year, ssb/1e9, group=rep)) + geom_line(alpha=.1) +
  ylim(0,NA) + labs(x=NULL, y='SSB (M t)', title='Posterior demo (unconverged!)')
ggsave('figures/MCMC_ssb_posterior.png', g, width=7, height=4, units='in')

```

This results in the following plots showing convergence and then finally the posterior distribution of SSB over time.
![MCMC marginals](figures/MCMC_marginals.png){width=7in}
![MCMC pairs](figures/MCMC_pairs.png){width=7in}
![MCMC uncertainties](figures/MCMC_uncertainties.png){width=7in}
![MCMC sampler parameters](figures/MCMC_sampler_params.png){width=7in}
![SSB Posterior](figures/MCMC_ssb_posterior.png){width=7in}

## Calculate conditional AIC and effective degrees of freedom
Zheng et al. (in review; 
[pdflink](https://doi.org/10.48550/arXiv.2411.14185)) present a new
formula to calculate conditional AIC. To do this it calculates
the "effective degrees of freedom" and uses that in the
calculation of cAIC. A parameter has 0 edf when all information
to estimate it comes from a prior or hyperpriors. In contrast it
has an edf of 1 when it is informed only by the data. Edf gives a
sense of complexity of the model, and cAIC will perform better
than marginal AIC (mAIC) for mixed effects models. Here I
demonstrate equation 6 on a FIMS model. This approach works on
penalized ML and random effects models alike. If Bayesian priors
(or penalties) are used it will also calculate the impact of
those relative to the data. No priors are used yet so that is
left off for now.

```{r}
# Set up a FIMS model without wrapper functions

# the original model (with data)
mle <- opt$par
hess <- obj$he(mle)

## make FIMS model without any data, only hyperdistribution on recdevs
FIMS::clear()
# this is a hack to trick the script to thinking there's no data (it should all be -999)
years <- 500:1000
source("R/pk_prepare_FIMS_inputs.R")
years <- 1970:2023
# build object but DO NOT optimize it, pass the original MLE to it
obj_nodata <- TMB::MakeADFun(data = list(), parameters, DLL = "FIMS", silent = TRUE)
success <- CreateTMBModel()
parameters <- list(p = get_fixed())
parameter_names <- names(FIMS:::get_parameter_names(obj[["par"]]))
lrandom <- is.na(parameter_names) # vector of which are affected by priors/penalties

# the cAIC calculations
Hess_data <- obj$he(mle)[lrandom, lrandom]
Hess_nodata <- obj_nodata$he(mle)[lrandom, lrandom]
negEDF <- diag(solve(Hess_data, Hess_nodata))
# some data processing
edf <- data.frame(par='recdev', n=1, edf=1-negEDF) |>
  mutate(year=1969+1:n()) |> ungroup()
g <- ggplot(edf, aes(year, y=edf)) + geom_point() +
  facet_wrap('par') + labs(x=NULL, y='Effective degree of freedom') +
ylim(NA,1)
ggsave('figures/cAIC_edf.png', g, width=7, height=4)
tab <- edf |> group_by(par) |> summarize(n=sum(n), edf=sum(edf)) |> 
  arrange(desc(edf)) 
tab <- bind_rows(tab, edf |> summarize(par='Total', n=sum(n), edf=sum(edf))) |>
  mutate(pct=100*edf/n)
gt::gt(tab) |> gt::fmt_number(columns = 3:4, decimals = 1)  

q <- sum(lrandom) # no. of random effects
p <- sum(1-lrandom) # no. of fixed effects
jnll <- obj$env$f(mle)
cnll <- jnll - obj_nodata$env$f(mle)
## conditional AIC (new calculation)
cAIC <- 2*cnll + 2*(p+q) - 2*sum(negEDF)
round(c(edf=sum(edf$edf), pct.edf=100*(sum(edf$edf)/sum(edf$n)),
     cAIC=cAIC, mAIC=TMBhelper::TMBAIC(opt)),1)
```

This appears to work except for the last recruitment deviation
which is negative which should be impossible. It is likely the
model is misconfigured.
![edf](figures/cAIC_edf.png){width=7in}

```{r}
# Clear C++ objects from memory
FIMS::clear()
```
