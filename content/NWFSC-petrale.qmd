---
title: NWFSC Case Study Petrale Sole
format:
  html:
    code-fold: true
---

## The setup

{{< include setup.qmd >}}

```{r}
#| warning: false
#| label: startup
#| output: false

ggplot2::theme_set(ggplot2::theme_bw())
```

-   R version: `r R_version`\
-   TMB version: `r TMB_version`\
-   FIMS commit: `r FIMS_commit`\
-   Stock name: West Coast Petrale Sole\
-   Region: NWFSC\
-   Analyst: Ian G. Taylor\

## Simplifications to the original assessment

The operational petrale sole stock assessment used Stock Synthesis (SS3) and included numerous data types and population dynamic assumptions that are not yet available in FIMS. A simplified SS3 model was also developed to provide a closer comparison but is still a work in progress. This is intended as a demonstration and nothing more.

For both the FIMS model and the simplified SS3 model, I made the following changes:

* Remove data
  * Remove male lengths and ages
  * Remove discard fractions and discard comps
* Simplify selectivity
  * Remove length-based retention functions
  * Convert to age-based logistic (from length-based double-normal, fixed asymptotic)
* Remove parameter priors (on M and h)
* Use female mean weight at age from wtatage file

## Script to prepare data for building FIMS object
```{r}
#| warning: false
#| label: prepare-fims-data
#| output: false

# read SS3 input files from petrale sole assessment on github
petrale_input <- r4ss::SS_read(
  "https://raw.githubusercontent.com/pfmc-assessments/petrale/main/models/2023.a034.001/"
)
# add wtatage file to list of input files
petrale_input[["wtatage"]] <- r4ss::SS_readwtatage(
  "https://raw.githubusercontent.com/pfmc-assessments/petrale/refs/heads/main/models/2023.a034.001/wtatage.ss_new"
)

petrale_output <- r4ss::SS_output(
  "https://raw.githubusercontent.com/pfmc-assessments/petrale/main/models/2023.a034.001",
  printstats = FALSE,
  verbose = FALSE,
  covar = FALSE
)
  
# define the dimensions based on the range in the data
# for petrale, the north fleet catch begins in 1896, 
# not the start year of the model 1876 (which is when the southern fleet catch begins,
# but for simplicity this petrale example only uses the northern catch)
# years <- seq(petrale_input$dat$styr, petrale_input$dat$endyr)
years <- seq(1896, petrale_input$dat$endyr)
nyears <- length(years)
nseasons <- 1
# ages <- 0:petrale_input$dat$Nages # population ages in SS3, starts at age 0
ages <- 1:17 # same as data bins
nages <- length(ages)
lengths <- petrale_output[["lbins"]]
nlengths <- length(lengths)

# source function to simplify data and convert from SS3 format
source("R/get_ss3_data.R")

# fleet 4 used conditional age-at-length data with marginal observations
# entered as fleet == -4 (to exclude from likelihood due to redundancy)
# using only marginals for FIMS and exclude CAAL data by filtering out
# the fleet 4 age data
# similarly, some early ages were excluded from fleet 1 in the original model
# by assigning to fleet -1, these get filtered by get_ss3_data()

# only include age comps with fleet = -4 or 1:
petrale_input$dat$agecomp <- petrale_input$dat$agecomp |>
  dplyr::filter(fleet %in% c(-4, 1)) |>
  dplyr::mutate(fleet = abs(fleet)) |>
  dplyr::arrange(fleet, year, dplyr::desc(Nsamp)) |>
  dplyr::distinct(fleet, year, .keep_all = TRUE)

# convert SS3 data into FIMS format using function defined in the R directory
mydat <- get_ss3_data(
  ss3_inputs = petrale_input,
  fleets = c(1, 4),
  ages = ages,
  lengths = petrale_input[["dat"]][["lbin_vector"]]
) |>
  # rename fleet4 as fleet2 (fleets 2 and 3 already removed above)
  dplyr::mutate(name = dplyr::case_when(
    name == "fleet1" ~ name,
    name == "fleet4" ~ "survey1" # change fleet4 to survey1 to match yellowtail case-study
  )) |>
  dplyr::filter(dateend |> lubridate::as_date() |> lubridate::year() %in% years) # filter out forecast years

# set up FIMS data objects
fims_frame <- FIMS::FIMSFrame(mydat)
```

### Prepare Parameters using `create_default_parameters()`
```{r, max.height='100px', attr.output='.numberLines'}

## lots of code below copied PIFSC-opakapaka.qmd
# rename SS3 output to avoid modifying lines copied from opakapaka model
rep <- petrale_output

# Define fleet specifications for fleet1 and survey1
fleet1 <-  list(
  selectivity = list(form = "LogisticSelectivity"),
  data_distribution = c(
    Landings = "DlnormDistribution",
    AgeComp = "DmultinomDistribution"
  )
)
survey1 <- list(
  selectivity = list(form = "LogisticSelectivity"),
  data_distribution = c(
    Index = "DlnormDistribution",
    AgeComp = "DmultinomDistribution"
  )
)

# Create default parameters
default_parameters <- fims_frame |>
  create_default_parameters(
    fleets = list(fleet1 = fleet1, survey1 = survey1)
  )

```

### Modifying parameters
```{r modify-default-parameters}

recdevs <- rep$recruitpars |> # $recruitpars is a subset of $parameters with Yr as an additional column
  dplyr::filter(Yr %in% years[-1]) |> # filter out initial numbers parameters
  dplyr::select(Yr, Value)

init_naa <- rep$natage |>
  dplyr::filter(Time == min(years), Sex == 1) |>  # numbers at age in FIMS start year, not SS3 model
  dplyr::select(paste(ages)) |> 
  as.numeric() # TODO: figure out if *1000 is needed
init_naa <- exp(rep$parameters |> dplyr::filter(grepl("R0", Label)) |> dplyr::pull(Init)) * 1000 * exp(-(ages - 1) * rep$parameters |> dplyr::filter(grepl("NatM.*Fem", Label)) |> dplyr::pull(Value))
init_naa[nages] <- init_naa[nages] / rep$parameters |> dplyr::filter(grepl("NatM.*Fem", Label)) |> dplyr::pull(Value) # sum of infinite series

# TODO: Move this to the R folder or FIMS
steepness_transform <- function(h) {
  # function to convert steepness into required parameter space
  -log(1.0 - h) + log(h - 0.2)
}

parameters <- default_parameters |>
  # SS3 model had length-based selectivity which leads to sex-specific
  # age-based selectivity due to sexually-dimorphic growth.
  # I didn't bother to calculate an age-based inflection point averaged over sexes
  update_parameters(
    modified_parameters = list(
      fleet1 = list(
        Fleet.log_Fmort.estimation_type = "constant",
        Fleet.log_Fmort.value = rep[["exploitation"]] |> 
          dplyr::filter(Yr %in% years) |>
          dplyr::mutate(North = ifelse(North == 0, -999, log(North))) |>
          dplyr::pull(North), # "North" is the SS3 fleet name
        LogisticSelectivity.inflection_point.value = 10, 
        LogisticSelectivity.inflection_point.estimation_type = "fixed_effects",
        LogisticSelectivity.slope.value = 2, #used age selex values
        LogisticSelectivity.slope.estimation_type = "fixed_effects"
      ),
      survey1 = list(
        LogisticSelectivity.inflection_point.value = 6, 
        LogisticSelectivity.inflection_point.estimation_type = "fixed_effects",
        LogisticSelectivity.slope.value = 2, 
        LogisticSelectivity.slope.estimation_type = "fixed_effects"
      )
    )
  ) |>
  update_parameters(
    modified_parameters = list(
      recruitment = list(
        BevertonHoltRecruitment.log_rzero.value = petrale_input$ctl$SR_parms["SR_LN(R0)", "INIT"],
        BevertonHoltRecruitment.log_devs.value = recdevs$Value,
        BevertonHoltRecruitment.logit_steep.value = petrale_input$ctl$SR_parms["SR_BH_steep", "INIT"] |>
          steepness_transform(),
        DnormDistribution.log_sd.value = 0.5
      )
    )
  ) |>
  update_parameters(
    modified_parameters = list(
      # approximate age-based equivalent to length-based maturity in petrale model
      # based on looking at model$endgrowth |> dplyr::filter(Sex == 1) |> dplyr::select(Age_Beg, Len_Mat)
      maturity = list(
        LogisticMaturity.inflection_point.value = 20.5, 
        LogisticMaturity.inflection_point.estimation_type = "constant",
        LogisticMaturity.slope.value = 1.8, # arbitrary guess
        LogisticMaturity.slope.estimation_type = "constant"
      )
    )
  ) |>
  update_parameters(
    modified_parameters = list(
      population = list(
        Population.log_init_naa.value = log(init_naa),
        Population.log_init_naa.estimation_type = "fixed_effects",
        Population.log_M.value = rep(
          log(rep$parameters["NatM_uniform_Fem_GP_1", "Value"]),
          get_n_years(fims_frame) * get_n_ages(fims_frame)
        ),
        Population.log_M.estimation_type = "constant"
      )
    )
  )

```
## Initialize modules and fit the model

With data and parameters in place, we can now initialize modules using `initialize_fims()` and fit the model using `fit_fims()`.
```{r, max.height='100px', attr.output='.numberLines', fit-fims, eval = TRUE}
# Run the model without optimization to help ensure a viable model
test_fit <- parameters |>
  initialize_fims(data = fims_frame) |>
  fit_fims(optimize = FALSE)

# Run the  model with optimization
fit <- parameters |>
  initialize_fims(data = fims_frame) |>
  fit_fims(optimize = TRUE)
  # TODO: why does the final message show no SB value: "i Terminal SB="
```

## Plotting Results

```{r data-fits-plots, eval = TRUE}
# gather index fit info
index_results <- data.frame(
  observed = m_index(fims_frame, "survey1"),
  expected = get_report(fit)[["index_exp"]][[2]]
) |>
  dplyr::mutate(year = years) |>
  dplyr::filter(observed > 0) # filter out -999 rows

# plot index fit
ggplot2::ggplot(index_results, ggplot2::aes(x = year, y = observed)) +
  ggplot2::geom_point() +
  ggplot2::xlab("Year") +
  ggplot2::ylab("Index (mt)") +
  ggplot2::geom_line(ggplot2::aes(x = year, y = expected), color = "blue") +
  ggplot2::theme_bw()


# gather catch info 
catch_results <- data.frame(
  year = years,
  observed = m_landings(fims_frame, fleet = "fleet1"),
  expected = get_report(fit)[["landings_exp"]][[1]]
)

# plot catch fit
ggplot2::ggplot(catch_results, ggplot2::aes(x = year, y = observed)) +
  ggplot2::geom_point() +
  #ggplot2::aes(color = fleet)) +
  ggplot2::xlab("Year") +
  ggplot2::ylab("Catch (mt)") +
  ggplot2::geom_line(ggplot2::aes(x = year, y = expected)) + #, color = fleet)) +
  ggplot2::theme_bw()
```

```{r ss3-comparison-plots}

# gather biomass info from FIMS and SS3
biomass <- rep$timeseries |> 
  dplyr::select(Yr, SpawnBio, Bio_all) |> 
  dplyr::filter(Yr %in% years) |> 
  dplyr::rename(
    "SS3_SpawnBio" = "SpawnBio",
    "SS3_Bio" = "Bio_all"
  ) |>
  dplyr::mutate(
    FIMS_SpawnBio = get_report(fit)[["ssb"]][[1]][-1] , 
    FIMS_Bio = get_report(fit)[["biomass"]][[1]][-1]
  ) |> ##CHECK: Is FIMS ssb reporting nyears+1 or initial year-1?
  tidyr::pivot_longer(cols = -Yr) |>
  tidyr::separate_wider_delim(
    cols = "name",
    delim = "_", names = c("Model", "Type")
  )

# plot comparison of spawning biomass and total biomass time series
ggplot2::ggplot(biomass, ggplot2::aes(x = Yr, y = value)) +
  ggplot2::geom_line(ggplot2::aes(color = Model)) +
  ggplot2::xlab("Year") +
  ggplot2::ylab("") +
  ggplot2::facet_wrap(~Type, scales = "free_y") +
  ggplot2::theme_bw()

# gather info on recruitment
recruits <- rep$recruit |> 
  dplyr::filter(Yr %in% years) |>
  dplyr::select(Yr, exp_recr, raw_dev) |>
  dplyr::rename("SS3_recruit" = "exp_recr",
                "SS3_recdev" = "raw_dev",
                "Year" = "Yr") |> 
  dplyr::mutate(FIMS_recruit = c(get_report(fit)[["recruitment"]][[1]][-1]),
                FIMS_recdev = c(NA, get_report(fit)[["log_recruit_dev"]][[1]]),
                SS3_recruit = SS3_recruit * 1000) |>
  tidyr::pivot_longer(cols = -Year) |>
  tidyr::separate_wider_delim(cols = "name", delim = "_", names = c("Model", "Type"))             

# plot recruit time series
ggplot2::ggplot(recruits, ggplot2::aes(x = Year, y = value, color = Model)) +
  ggplot2::geom_line() + 
  ggplot2::facet_wrap(~Type, scales = "free_y") +
  ggplot2::theme_bw()

```

```{r}
#| warning: false
#| label: clear
#| output: false

clear()
```
